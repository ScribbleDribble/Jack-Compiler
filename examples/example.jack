// Code from the book The Elements of Computing Systems: Building a Modern Computer from First Principles *now modified
/** The List class provides a linked list abstraction. */

class List {

    field int data, num, anotha_one;
    field List next;

    method void g(int x, int y, int z) {
        let data = x;
        return;
    }

    method void render(int p, int q) {
       var int dunno;
       let data = p + g(next,data,dunno) * 5;
       return;
    }

    /* Creates a new List object. */

    constructor List new(int car, List cdr) {
        let next = cdr;
        let data = car + render(2, num) + 2 + 99 + num + "ok";

        return this;
    }
    /* Creates a new List object. some more comments */

    method void dispose(int name, int price) {
        var char key;
        var char key2;


        if (-(next = null)) {
            do next.dispose();
        }


        // Use an OS routine to recycle the memory held by this
        // object.

        do Memory.deAlloc(this);
        return;
    }
}

/* Creates a list holding the numbers (2,3,5).
    (this code can appear in any class). */

function void create235() {
    var List v;
    let v = List.new(5, null);
    let v = List.new(2,List.new(3,v));
    // Does something with the list

    while (something) {
        let v = ok;
    }

    do v.dispose();
    return;
}