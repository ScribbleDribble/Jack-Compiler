<class>
	<identifier>List</identifier>
	<symbol>{</symbol>
	<class_var_dec>
		<keyword>field</keyword>
		<keyword>int</keyword>
		<identifier>data</identifier>
		<identifier>num</identifier>
		<identifier>anotha_one</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<class_var_dec>
		<keyword>field</keyword>
		<keyword>List</keyword>
		<identifier>next</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<subroutine>
		<keyword>constructor</keyword>
		<keyword>new</keyword>
		<symbol>(</symbol>
		<param_list>
			<keyword>int</keyword>
			<identifier>car</identifier>
			<symbol>,</symbol>
			<keyword>List</keyword>
			<identifier>cdr</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>data</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>car</identifier>
					<symbol>+</symbol>
					<identifier>truck</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
					<symbol>+</symbol>
					<identifier>airplane</identifier>
					<symbol>.</symbol>
					<identifier>get_speed</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>k</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>foo</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
					<symbol>+</symbol>
					<INT_CONST>2</INT_CONST>
					<symbol>+</symbol>
					<INT_CONST>99</INT_CONST>
					<symbol>+</symbol>
					<identifier>xyz</identifier>
					<symbol>+</symbol>
					<identifier>lmaoooo</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>next</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>cdr</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<return_statement>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<keyword>void</keyword>
		<identifier>dispose</identifier>
		<symbol>(</symbol>
		<param_list>
			<keyword>int</keyword>
			<identifier>name</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>price</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<varDec>
			<keyword>var</keyword>
			<keyword>char</keyword>
			<identifier>key</identifier>
			<symbol>;</symbol>
		</varDec>
		<varDec>
			<keyword>var</keyword>
			<keyword>char</keyword>
			<identifier>key2</identifier>
			<symbol>;</symbol>
		</varDec>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>-</symbol>
					<symbol>(</symbol>
				<expression>
					<identifier>next</identifier>
					<symbol>=</symbol>
					<KEYWORD>null</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>next</identifier>
					<symbol>.</symbol>
					<identifier>dispose</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>deAlloc</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
</class>
	<subroutine>
		<keyword>void</keyword>
		<keyword>void</keyword>
		<identifier>create235</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<varDec>
			<keyword>var</keyword>
			<keyword>List</keyword>
			<identifier>v</identifier>
			<symbol>;</symbol>
		</varDec>
		<statements>
			<let_statement>
				<identifier>v</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>List</identifier>
					<symbol>.</symbol>
					<identifier>new</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>5</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<KEYWORD>null</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>v</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>List</identifier>
					<symbol>.</symbol>
					<identifier>new</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>2</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>List</identifier>
					<symbol>.</symbol>
					<identifier>new</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>3</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>v</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>something</identifier>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>v</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>ok</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
			<do_statement>
				<identifier>v</identifier>
					<symbol>.</symbol>
					<identifier>dispose</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
