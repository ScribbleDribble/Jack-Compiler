<class>
	<identifier>Square</identifier>
	<symbol>{</symbol>
	<class_var_dec>
		<keyword>field</keyword>
		<type>int</type>
		<identifier>x</identifier>
		<identifier>y</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<class_var_dec>
		<keyword>field</keyword>
		<type>int</type>
		<identifier>size</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<subroutine>
		<keyword>constructor</keyword>
		<keyword>new</keyword>
		<symbol>(</symbol>
		<param_list>
			<type>int</type>
			<identifier>Ax</identifier>
			<symbol>,</symbol>
			<type>int</type>
			<identifier>Ay</identifier>
			<symbol>,</symbol>
			<type>int</type>
			<identifier>Asize</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>x</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Ax</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>y</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Ay</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>size</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Asize</identifier>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>draw</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>dispose</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>deAlloc</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>draw</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>erase</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>incSize</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol><</symbol>
					<INT_CONST>254</INT_CONST>
				</expression>
					<symbol>)</symbol>
					<symbol>&</symbol>
					<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol><</symbol>
					<INT_CONST>510</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>erase</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>size</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>size</identifier>
					<symbol>+</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>draw</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>decSize</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>size</identifier>
					<symbol>></symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>erase</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>size</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>size</identifier>
					<symbol>-</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>draw</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>moveUp</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>></symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>y</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>-</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>moveDown</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol><</symbol>
					<INT_CONST>254</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>y</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>moveLeft</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>></symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>x</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>-</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>moveRight</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol><</symbol>
					<INT_CONST>510</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>x</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>x</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>setColor</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Screen</identifier>
					<symbol>.</symbol>
					<identifier>drawRectangle</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>x</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>y</identifier>
					<symbol>+</symbol>
					<identifier>size</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
</class>
<class>
	<identifier>SquareGame</identifier>
	<symbol>{</symbol>
	<class_var_dec>
		<keyword>field</keyword>
		<type>Square</type>
		<identifier>square</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<class_var_dec>
		<keyword>field</keyword>
		<type>int</type>
		<identifier>direction</identifier>
		<symbol>;</symbol>
	</class_var_dec>
	<subroutine>
		<keyword>constructor</keyword>
		<keyword>new</keyword>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>square</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Square</identifier>
					<symbol>.</symbol>
					<identifier>new</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>0</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<INT_CONST>0</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<INT_CONST>30</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>direction</identifier>
				<symbol>=</symbol>
				<expression>
					<INT_CONST>0</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<return_statement>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>dispose</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>dispose</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>deAlloc</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<KEYWORD>this</KEYWORD>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>run</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<varDec>
			<keyword>var</keyword>
			<keyword>char</keyword>
			<identifier>key</identifier>
			<symbol>;</symbol>
		</varDec>
		<varDec>
			<keyword>var</keyword>
			<keyword>boolean</keyword>
			<identifier>exit</identifier>
			<symbol>;</symbol>
		</varDec>
		<statements>
			<let_statement>
				<identifier>exit</identifier>
				<symbol>=</symbol>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>~</symbol>
					<identifier>exit</identifier>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>0</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>key</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Keyboard</identifier>
					<symbol>.</symbol>
					<identifier>keyPressed</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>moveSquare</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>81</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>exit</identifier>
				<symbol>=</symbol>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>90</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>decSize</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>88</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>incSize</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>131</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>direction</identifier>
				<symbol>=</symbol>
				<expression>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>133</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>direction</identifier>
				<symbol>=</symbol>
				<expression>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>130</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>direction</identifier>
				<symbol>=</symbol>
				<expression>
					<INT_CONST>3</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>132</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>direction</identifier>
				<symbol>=</symbol>
				<expression>
					<INT_CONST>4</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>~</symbol>
					<symbol>(</symbol>
				<expression>
					<identifier>key</identifier>
					<symbol>=</symbol>
					<INT_CONST>0</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>key</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Keyboard</identifier>
					<symbol>.</symbol>
					<identifier>keyPressed</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>moveSquare</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>method</keyword>
		<type>void</type>
		<identifier>moveSquare</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>moveUp</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>moveDown</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<INT_CONST>3</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>moveLeft</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>direction</identifier>
					<symbol>=</symbol>
					<INT_CONST>4</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>square</identifier>
					<symbol>.</symbol>
					<identifier>moveRight</identifier>
					<symbol>(</symbol>
					<symbol>)</symbol>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
			<do_statement>
				<identifier>Sys</identifier>
					<symbol>.</symbol>
					<identifier>wait</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>5</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
</class>
