<class>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<subroutine>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>main</identifier>
		<symbol>(</symbol>
		<param_list>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<varDec>
			<keyword>var</keyword>
			<keyword>int</keyword>
			<identifier>value</identifier>
			<symbol>;</symbol>
		<statements>
			<do_statement>
				<identifier>Main</identifier>
					<symbol>.</symbol>
					<identifier>fillMemory</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>8001</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<INT_CONST>16</INT_CONST>
				</expression>
					<symbol>,</symbol>
				<expression>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>value</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>peek</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>8000</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<do_statement>
				<identifier>Main</identifier>
					<symbol>.</symbol>
					<identifier>convert</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>value</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>convert</identifier>
		<symbol>(</symbol>
		<param_list>
			<keyword>int</keyword>
			<identifier>value</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<varDec>
			<keyword>var</keyword>
			<keyword>int</keyword>
			<identifier>mask</identifier>
		<identifier>position</identifier>
		</varDec>
		<varDec>
			<keyword>var</keyword>
			<keyword>boolean</keyword>
			<identifier>loop</identifier>
			<symbol>;</symbol>
		<statements>
			<let_statement>
				<identifier>loop</identifier>
				<symbol>=</symbol>
				<expression>
					<KEYWORD>true</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>loop</identifier>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>position</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>position</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>mask</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>Main</identifier>
					<symbol>.</symbol>
					<identifier>nextMask</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>mask</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>~</symbol>
					<symbol>(</symbol>
				<expression>
					<identifier>position</identifier>
					<symbol>></symbol>
					<INT_CONST>16</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<symbol>~</symbol>
					<symbol>(</symbol>
				<expression>
					<symbol>(</symbol>
				<expression>
					<identifier>value</identifier>
					<symbol>&</symbol>
					<identifier>mask</identifier>
				</expression>
					<symbol>)</symbol>
					<symbol>=</symbol>
					<INT_CONST>0</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>poke</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>8000</INT_CONST>
					<symbol>+</symbol>
					<identifier>position</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<INT_CONST>1</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			<else_statement>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>poke</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<INT_CONST>8000</INT_CONST>
					<symbol>+</symbol>
					<identifier>position</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<INT_CONST>0</INT_CONST>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
		</statements>
				<symbol>}</symbol>
			<else_statement>
				<symbol>{</symbol>
		<statements>
			<let_statement>
				<identifier>loop</identifier>
				<symbol>=</symbol>
				<expression>
					<KEYWORD>false</KEYWORD>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>function</keyword>
		<keyword>int</keyword>
		<identifier>nextMask</identifier>
		<symbol>(</symbol>
		<param_list>
			<keyword>int</keyword>
			<identifier>mask</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<if_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>mask</identifier>
					<symbol>=</symbol>
					<INT_CONST>0</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<return_statement>
				<expression>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</return_statement>
		</statements>
				<symbol>}</symbol>
			<else_statement>
				<symbol>{</symbol>
		<statements>
			<return_statement>
				<expression>
					<identifier>mask</identifier>
					<symbol>*</symbol>
					<INT_CONST>2</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</return_statement>
		</statements>
				<symbol>}</symbol>
			</if_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
	<subroutine>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<identifier>fillMemory</identifier>
		<symbol>(</symbol>
		<param_list>
			<keyword>int</keyword>
			<identifier>startAddress</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>length</identifier>
			<symbol>,</symbol>
			<keyword>int</keyword>
			<identifier>value</identifier>
		</param_list>
		<symbol>)</symbol>
		<symbol>{</symbol>
		<statements>
			<while_statement>
				<symbol>(</symbol>
				<expression>
					<identifier>length</identifier>
					<symbol>></symbol>
					<INT_CONST>0</INT_CONST>
				</expression>
				<symbol>)</symbol>
				<symbol>{</symbol>
		<statements>
			<do_statement>
				<identifier>Memory</identifier>
					<symbol>.</symbol>
					<identifier>poke</identifier>
					<symbol>(</symbol>
					<expression_list>
				<expression>
					<identifier>startAddress</identifier>
				</expression>
					<symbol>,</symbol>
				<expression>
					<identifier>value</identifier>
				</expression>
					<symbol>)</symbol>
				</expression_list>
				<symbol>;</symbol>
			</do_statement>
			<let_statement>
				<identifier>length</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>length</identifier>
					<symbol>-</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
			<let_statement>
				<identifier>startAddress</identifier>
				<symbol>=</symbol>
				<expression>
					<identifier>startAddress</identifier>
					<symbol>+</symbol>
					<INT_CONST>1</INT_CONST>
				</expression>
				<symbol>;</symbol>
			</let_statement>
		</statements>
				<symbol>}</symbol>
			</while_statement>
			<return_statement>
				<symbol>;</symbol>
			</return_statement>
		</statements>
		<symbol>}</symbol>
	</subroutine>
</class>
